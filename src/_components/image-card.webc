<!---
<image-card id="HASH" quality="0.5">
  <img slot="thumbnail" src="DATA_URL" alt="">
  <h3 slot="filename">MPP.jpg</h3>
  <span slot="original">200 KB</span>
</image-card>
--->

<style>
  image-card {
    display: flex;
    gap: var(--space-xs, 1em);
    border: 1px solid transparent;
    padding: var(--space-2xs, 1em);
    position: relative;
    /* padding-right: var(--space-xs); */
    /* border-radius: var(--space-xs); */
    /* width: 500px; */

    & * { margin: 0; }

    & .thumbnail {
      aspect-ratio: 1;
      width: 84px;
      border-radius: var(--space-3xs);
      flex-shrink: 0;

      &:empty { background-color: var(--color-primary); }

      > img {
        width: 100%;
        height: 100%;
        object-fit: contain;
      }
    }

    & .text {
      flex-grow: 1;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      gap: var(--space-2xs, 1rem);

      & .filename {
        font-size: var(--step-0);
        font-weight: 400;
        overflow-wrap: anywhere; /* force line break to prevent overflowing */

        /* limit to 2 lines */
        display: -webkit-box;
        -webkit-box-orient: vertical;
        -webkit-line-clamp: 2;
                line-clamp: 2;
        overflow: hidden;
        text-overflow: ellipsis;
      }

      & .details {
        font-size: var(--step--1);
        display: flex;
        align-items: center;
        gap: var(--space-s, 1rem);
        justify-content: space-between;

        & .size .original {
          opacity: 0.5;
          font-size: var(--step--2);
        }
      }
    }

    /* Validation icons */
    &[aria-invalid] .icon-success {
      display: none;
    }
    &:not([aria-invalid]) .icon-failure {
      display: none;
    }

    /* States */
    &:hover {
      background-color: var(--color-light-mod-1);
    }
    &[loading]::after {
      content: 'compressing...';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: var(--color-info);
      color: var(--color-light);
      display: grid;
      place-items: center;
    }
    /* TODO: active state */
  }
</style>

<script webc:bucket="defer">
  /**
   * The <image-card> component has the following attributes:
   * - blob
   *   - derive sizes, file format
   * - quality (default 0.5)
   * - filename
   *
   * <image-card
   *   quality="0.5"
   *   blob="randomstringofcharacters"
   *   name="ATL_MS_1453462_MPP-1080x486.jpg"
   *   size="208652"
   * ></image-card>
   */

  /**
   * The ImageCard component takes a File object representing an image, which
   * can come from an `<input type="file">` or via dragging images into the
   * DropZone. The File prop is used to derive image metadata for the original
   * and compressed versions. The `quality` attribute is used to keep track of
   * the current compression level, which can be adjusted by the user via the
   * QualitySlider component.
   */
  class ImageCard extends HTMLElement {
    set quality(val) {
      this.setAttribute('quality', val)
    }
    get quality() {
      return Number(this.getAttribute('quality'))
    }
    set valid(val) {
      const isValid = Boolean(val)
      if (isValid) {
        this.removeAttribute('aria-invalid')
      } else {
        this.setAttribute('aria-invalid', 'true')
      }
    }
    get valid() {
      return !this.getAttribute('aria-invalid')
    }
    set loading(bool) {
      this.toggleAttribute('loading', bool)
    }
    get loading() {
      return this.hasAttribute('loading')
    }

    static get observedAttributes() {
      return ['quality']
    }
    async attributeChangedCallback(name, oldVal, newVal) {
      if (!this.dom || !this.data.image) return
      switch (name) {
        case 'quality':
          this.compressImage()
          break
      }
    }

    constructor(file) {
      super()
      this.data = {
        file,
        image: null,
        compressed: {
          blob: null,
          url: null,
        },
      }
      console.log(this.data.file)
    }

    connectedCallback() {
      this.innerHTML = `
        <div class="thumbnail"></div>
        <div class="text">
          <h3 class="filename">TEST_ATL_MS_1453462_MPP-1080x486.jpg</h3>
          <div class="details">
            <div class="size">
              <p class="compressed">Size: <strong>98.72 KB</strong></p>
              <p class="original">Original: <span>203.76 KB</span></p>
            </div>
            <svg class="icon icon-success"><use href="#check-solid" /></svg>
            <svg class="icon icon-failure"><use href="#cross-solid" /></svg>
          </div>
        </div>
      `
      this.tabIndex = 0 // Make image cards focusable

      this.dom = {
        thumbnail: this.querySelector('.thumbnail'),
        filename: this.querySelector('.filename'),
        sizeCompressed: this.querySelector('.compressed > strong'),
        sizeOriginal: this.querySelector('.original > span'),
      }

      if (!this.quality) {
        this.quality = 0.5
      }

      if (this.data.file) {
        this.render()
      }
    }

    render() {
      this.loadImage()
      this.dom.filename.textContent = this.data.file.name
      this.dom.filename.title = this.data.file.name
      this.dom.sizeOriginal.textContent = bytesToSize(this.data.file.size)
    }

    loadImage() {
      this.data.image = new Image()
      const reader = new FileReader()
      reader.onloadend = () => {
        this.data.image.onload = () => this.onImageLoad()
        this.data.image.src = reader.result
      }
      reader.readAsDataURL(this.data.file)
    }

    async onImageLoad() {
      // Append thumbnail to DOM
      this.dom.thumbnail.appendChild(this.data.image)
      // Compress image
      await this.compressImage()
    }

    async compressImage() {
      if (this.data.file.type === 'image/png') {
        this.loading = true

        const compressed = await this.optimizePNG()
        this.data.compressed.blob = new Blob([compressed], { type: 'image/png' })
        console.log(this.data.compressed.blob)

        this.data.compressed.url = URL.createObjectURL(this.data.compressed.blob)
        this.dom.sizeCompressed.textContent = bytesToSize(this.data.compressed.blob.size)

        this.loading = false

      } else {
        const offscreenCanvas = new OffscreenCanvas(this.data.image.naturalWidth, this.data.image.naturalHeight)
        const ctx = offscreenCanvas.getContext('2d')

        ctx.drawImage(this.data.image, 0, 0)
        this.data.compressed.blob = await offscreenCanvas.convertToBlob({
          type: this.data.file.type,
          quality: this.quality,
        })
        console.log(this.data.compressed.blob)

        this.data.compressed.url = URL.createObjectURL(this.data.compressed.blob)
        this.dom.sizeCompressed.textContent = bytesToSize(this.data.compressed.blob.size)
      }

      // size validation
      this.valid = this.data.compressed.blob.size < 102400

      this.dispatchEvent(new CustomEvent('imagecompress', {
        bubbles: true,
        detail: {
          original: this.data.image.src,
          compressed: this.data.compressed.url,
        },
      }))
    }

    optimizePNG() {
      const worker = new Worker('/js/worker.js')
      const quality = this.quality * 100
      const min = quality > 30 ? 30 : quality
      const max = quality < 30 ? 30 : quality
      const options = {
        quality: min + '-' + max,
        // speed: '4',
      }
      console.log(options)

      return new Promise((resolve) => {
        worker.onmessage = (e) => {
          resolve(e.data.data)
          worker.terminate()
        }
        this.data.file.arrayBuffer().then(buf => {
          worker.postMessage({
            file: new Uint8Array(buf),
            options,
          })
        })
      })
    }
  }

  if (!customElements.get('image-card')) {
    customElements.define('image-card', ImageCard)
  }
</script>
