<ul id="images" role="listbox"></ul>
<div>
  <!-- Error message -->
  <div class="error"></div>
  <!-- Download link -->
  <div class="buttons">
    <button id="download" class="btn">Download</button>
    <button id="clear" class="btn outline">Clear Queue</button>
  </div>
</div>

<style>
  image-queue {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    gap: var(--space-s, 1em);
    /* border: 1px solid red; */
    /* height: 500px; */

    & ul {
      list-style: none;
      margin: 0;
      padding: 0;

      &:empty ~ * {
        display: none; /* only show buttons when queue is not empty */
      }
    }

    & .buttons {
      display: flex;
      flex-direction: column;
      gap: var(--space-s, 1em);
      padding: var(--space-s, 1em);
    }
  }
</style>

<script webc:bucket="module">
  class ImageQueue extends HTMLElement {
    constructor() {
      super()
      this.images = []
    }

    connectedCallback() {
      this.dom = {
        listbox: this.querySelector('[role="listbox"]'),
        download: this.querySelector('#download'),
        clear: this.querySelector('#clear'),
      }

      this.addEventListener('click', this)
      this.dom.clear.addEventListener('click', (e) => {
        this.dom.listbox.innerHTML = ''
        this.dispatchEvent(new CustomEvent('queueclear', { bubbles: true }))
      })

      if (!this.activecard) {
        this.activecard = 0
      }
    }

    // Reflection
    set activecard(val) {
      this.setAttribute('activecard', val)
    }
    get activecard() {
      return Number(this.getAttribute('activecard'))
    }

    add(file) {
      const imagecard = new ImageCard(file)
      this.dom.listbox.appendChild(imagecard)
    }

    render() {
      this.images.forEach(image => {
        console.log(image.name, image.size)
        let ic = new ImageCard(image)
        this.appendChild(ic)
      })
    }

    handleEvent(e) {
      const imagecard = e.target.closest('image-card')
      if (e.type === 'click' && imagecard) {
        const cards = Array.from(this.dom.listbox.children)
        this.activecard = cards.indexOf(imagecard)
        cards.forEach((card, index) => {
          if (index === this.activecard) {
            card.setAttribute('aria-selected', 'true')
          } else {
            card.setAttribute('aria-selected', 'false')
          }
        })

        this.dispatchEvent(new CustomEvent('cardselect', {
          bubbles: true,
          detail: {
            original: imagecard.data.image.src,
            compressed: imagecard.data.compressed.url,
            width: imagecard.data.image.naturalWidth,
            height: imagecard.data.image.naturalHeight,
            quality: imagecard.quality,
          },
        }))
      }
    }

    downloadOne() {}

    downloadAll() {}
  }

  if (!customElements.get('image-queue')) {
    customElements.define('image-queue', ImageQueue)
  }
</script>
