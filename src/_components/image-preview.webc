<style>
  image-preview {
    display: flex;
    flex-direction: column;
    margin: 0;
    overflow: hidden;
    position: relative;

    > img {
      height: auto;
      width: 100%;

      &[hidden] {
        visibility: hidden;
      }

      &:last-child {
        position: absolute;
        top: 0;
      }
    }
  }
</style>

<script webc:bucket="defer">
  /**
   * The <image-preview> component will render the selected image card,
   * either as an <image-compare> slider or as the compressed version, with
   * users having the ability to click-and-hold the image to preview the
   * original version.
   *
   * This component also auto-updates as the value of the <quality-slider>
   * changes, allowing users to see the effects of changing the quality of
   * an image in real time.
   */
  class ImagePreview extends HTMLElement {
    constructor() {
      super()
      this.data = {
        original: null,
        compressed: null,
      }
    }

    connectedCallback() {
      if (!this.mode) {
        this.mode = 'slider' // or `pointerdown` for tap-and-hold preview
      }

      this.render()
      this.mapDOM()
    }

    static get observedAttributes() {
      return ['mode']
    }
    attributeChangedCallback(name, oldVal, newVal) {
      if (!this.dom) return
      switch (name) {
        case 'mode':
          this.render()
          this.mapDOM()
          break
      }
    }

    set mode(val) {
      this.setAttribute('mode', val)
    }
    get mode() {
      return this.getAttribute('mode')
    }
    set sources(val) {
      this.data.original = val[0]
      this.data.compressed = val[1]
      this.updateSources()
    }
    get sources() {
      return Object.values(this.data)
    }

    render() {
      let srcOriginal, srcCompressed
      if (this.sources) {
        srcOriginal = ` src="${this.sources[0]}"`
        srcCompressed = ` src="${this.sources[1]}"`
      }

      if (this.mode === 'slider') {
        this.removeEventListener('pointerdown', this.showOriginal)
        this.removeEventListener('pointerup', this.hideOriginal)
        this.innerHTML = `
          <image-compare>
            <img slot="image-1" alt=""${srcOriginal || ''}>
            <img slot="image-2" alt=""${srcCompressed || ''}>
          </image-compare>
        `
      } else {
        this.innerHTML = `
          <img alt="" draggable="false"${srcCompressed || ''}>
          <img alt="" draggable="false" hidden${srcOriginal || ''}>
        `
        this.addEventListener('mousedown', this.showOriginal)
        this.addEventListener('mouseup', this.hideOriginal)
      }
    }

    mapDOM() {
      let image1, image2
      if (this.mode === 'slider') {
        const imageCompare = this.querySelector('image-compare')
        image1 = imageCompare.firstElementChild
        image2 = imageCompare.lastElementChild
      } else {
        image1 = this.firstElementChild
        image2 = this.lastElementChild
      }
      this.dom = { image1, image2 }
    }

    updateSources() {
      const [original, compressed] = this.sources
      if (this.mode === 'slider') {
        this.dom.image1.src = original
        this.dom.image2.src = compressed
      } else {
        this.dom.image1.src = compressed
        this.dom.image2.src = original
      }
    }

    showOriginal() {
      this.lastElementChild.hidden = false
    }

    hideOriginal() {
      this.lastElementChild.hidden = true
    }
  }

  if (!customElements.get('image-preview')) {
    customElements.define('image-preview', ImagePreview)
  }
</script>
