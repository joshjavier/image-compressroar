<svg width="104" height="104" viewBox="0 0 104 104" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
  <path d="M84 33.3333C91.3638 33.3333 97.3333 27.3638 97.3333 20C97.3333 12.6362 91.3638 6.66663 84 6.66663C76.6362 6.66663 70.6666 12.6362 70.6666 20C70.6666 27.3638 76.6362 33.3333 84 33.3333Z" stroke="currentColor" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M84 14.6666V25.3333" stroke="currentColor" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M78.6666 20H89.3333" stroke="currentColor" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"/>
  <path fill-rule="evenodd" clip-rule="evenodd" d="M89.5 39.2342V83.1667C89.5 88.8736 84.8736 93.5 79.1667 93.5H20.8333C15.1264 93.5 10.5 88.8736 10.5 83.1667V24.8333C10.5 19.1264 15.1264 14.5 20.8333 14.5H64.7658C64.399 15.7852 64.1575 17.1232 64.0554 18.5H20.8333C17.3355 18.5 14.5 21.3355 14.5 24.8333V83.1667C14.5 86.6645 17.3355 89.5 20.8333 89.5H79.1667C82.6645 89.5 85.5 86.6645 85.5 83.1667V39.9446C86.8768 39.8425 88.2148 39.601 89.5 39.2342Z" fill="currentColor"/>
  <path d="M35.4166 45.6666C38.8684 45.6666 41.6666 42.8684 41.6666 39.4166C41.6666 35.9648 38.8684 33.1666 35.4166 33.1666C31.9648 33.1666 29.1666 35.9648 29.1666 39.4166C29.1666 42.8684 31.9648 45.6666 35.4166 45.6666Z" stroke="currentColor" stroke-width="4" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M87.5 66.5L66.6667 45.6666L20.8334 91.5" stroke="currentColor" stroke-width="4" stroke-linecap="round" stroke-linejoin="round"/>
</svg>
<p class="primary-label">Drag and drop your images here</p>
<p class="secondary-label">
  Or,
  <label class="filepicker">
    <span>browse to select</span>
    <input
      type="file"
      accept="image/*"
      multiple
    >
  </label>
</p>

<style>
  drop-zone {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 1rem;
    min-height: 300px;
    border-radius: var(--space-3xs);
    background-color: var(--dropzone-bg, var(--color-light-mod-1));
    position: relative;
    text-align: center;
    box-shadow: inset 0 4px 4px hsl(0 0% 0% / 15%),
      0 2px 0 hsl(0 0% 100% / 15%);

    & * { margin: 0; }

    & .primary-label {
      font-weight: 700;
      font-size: var(--step-3);
      width: 15ch;
      line-height: normal;
    }

    & .filepicker {
      position: relative;
      cursor: pointer;

      & span {
        text-decoration: underline;
        color: var(--color-primary);

        label:hover & {
          text-decoration: none;
        }
      }

      /* Show focus indicator on label on input focus */
      &:focus-within {
        outline: var(--fluid-6-9) double black;
        box-shadow: 0 0 0 var(--fluid-4-6) white;
      }

      /* Hide the native input element */
      & input[type="file"] {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        z-index: -1;
      }
    }

    &.highlight::after {
      content: '';
      position: absolute;
      top: 0.5rem;
      left: 0.5rem;
      width: calc(100% - 1rem);
      height: calc(100% - 1rem);
      background-color: #eb5e2833;
      border: 2px dashed var(--color-primary);
      border-radius: var(--fluid-2-4);
      pointer-events: none;
    }
  }
</style>

<script webc:bucket="defer">
  /**
   * The drop zone adds images to the image queue, whic is then used by the
   * <image-queue> component to render the <image-card>s that represent the
   * images to be compressed.
   */

  class DropZone extends HTMLElement {
    connectedCallback() {
      this.dom = {
        input: this.querySelector('input[type="file"]'),
        queue: document.querySelector(`#${this.getAttribute('for')}`),
      }

      // Add files to queue via file picker
      this.dom.input.addEventListener('change', () => {
        const fileList = this.dom.input.files
        this.dom.queue.images = this.dom.queue.images.concat(Array.from(fileList))
        console.log(this.dom.queue.images)
      })

      // Add files to queue via drag-and-drop
      document.addEventListener('dragover', (e) => {
        e.preventDefault() // allows drop event to fire
        if (this.contains(e.target)) {
          e.dataTransfer.dropEffect = 'copy'
          this.classList.add('highlight')
        } else {
          e.dataTransfer.dropEffect = 'none'
        }
      })

      this.addEventListener('dragleave', (e) => {
        if (this.contains(e.relatedTarget)) {
          return // only remove highlight when dragging outside of the dropzone
        }
        this.classList.remove('highlight')
      })

      document.addEventListener('drop', (e) => {
        e.preventDefault() // don't open dragged items as link
        if (this.contains(e.target)) {
          this.classList.remove('highlight')

          const fileList = e.dataTransfer.files
          this.dom.queue.images = this.dom.queue.images.concat(Array.from(fileList))
          console.log(this.dom.queue.images)
        }
      })
    }
  }

  if (!customElements.get('drop-zone')) {
    customElements.define('drop-zone', DropZone)
  }
</script>
