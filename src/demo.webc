---
layout: 'layouts/base.webc'
---
<div id="app">
  <header>
    <h1>Image Compressroar Demo</h1>
  </header>

  <main class="with-sidebar">
    <!-- Sidebar -->
    <div>
      <drop-zone for="images"></drop-zone>
      <image-queue id="images">
      </image-queue>
      <image-card style="display: none;"></image-card> <!-- TODO: refactor so we don't need to insert an empty tag here -->
    </div>

    <!-- Main panel -->
    <div class="cover">
      <!-- Options bar -->
      <div class="options">
        <quality-slider></quality-slider>
        <preview-toggle></preview-toggle>
      </div>
      <!-- Image preview -->
      <div class="center">
        <image-preview></image-preview>
      </div>
    </div>
  </main>

  <!-- <footer></footer> -->
</div>

<style>
  #app {
    display: flex;
    flex-direction: column;
    min-height: 100vh;

    > header {
      padding: 1em;

      & * { margin: 0; }
    }

    > main {
      flex-grow: 1;
    }

    & .options {
      display: flex;
      gap: var(--space-s, 1em);
    }
  }
</style>

<script webc:bucket="defer">
  const imagePreview = document.querySelector('image-preview')
  const imageQueue = document.querySelector('image-queue')
  const qualitySlider = document.querySelector('quality-slider')

  const debounce = (callback, wait) => {
    let timeoutId = null;
    return (...args) => {
      window.clearTimeout(timeoutId);
      timeoutId = window.setTimeout(() => {
        callback.apply(null, args);
      }, wait);
    };
  }

  document.addEventListener('cardselect', (e) => {
    console.log('cardselect')
    const { original, compressed } = e.detail
    imagePreview.sources = [original, compressed]
    qualitySlider.value = e.detail.quality
  })

  document.addEventListener('filedrop', (e) => {
    console.log('filedrop')
    Array.from(e.detail.files).forEach(file => {
      imageQueue.add(file)
    })
  })

  document.addEventListener('qualitychange', debounce((e) => {
    const selected = document.querySelector('[aria-selected="true"]')
    if (selected) {
      selected.quality = e.detail.quality
      selected.addEventListener('imagecompress', (e) => {
        imagePreview.sources = [e.detail.original, e.detail.compressed]
      }, { once: true })
    }
  }, 500))

  document.addEventListener('previewtoggle', (e) => {
    imagePreview.mode = e.detail.preview
  })
</script>
